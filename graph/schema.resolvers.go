package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"github.com/0xa1-red/empires-of-avalon/graph/model"
	"github.com/0xa1-red/empires-of-avalon/httpserver"
	"github.com/0xa1-red/empires-of-avalon/repository"
	"github.com/google/uuid"
	"golang.org/x/exp/slog"
)

// Inventory is the resolver for the inventory field.
func (r *queryResolver) Inventory(ctx context.Context) (*model.Inventory, error) {
	auth := ctx.Value(httpserver.ContextAuth)
	slog.Error("not implemented")

	userID, err := uuid.Parse(auth.(string))
	if err != nil {
		return nil, fmt.Errorf("failed to parse user ID")
	}

	response := &model.Inventory{}
	response.User = &model.User{
		ID:   auth.(string),
		Name: auth.(string),
	}

	inventory, err := repository.Inventory(userID)
	if err != nil {
		return nil, fmt.Errorf("failed to retrieve inventory: %w", err)
	}

	response.Buildings = Buildings(inventory)

	response.Resources = Resources(inventory)

	return response, nil
}

// Buildings is the resolver for the buildings field.
func (r *queryResolver) Buildings(ctx context.Context, name *string) (*model.InventoryBuilding, error) {
	panic(fmt.Errorf("not implemented: Buildings - buildings"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
